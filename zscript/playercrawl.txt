// ------------------------------------------------------------
// CRAAAAAAAAAAAWWWWLING IN MY SKIN
// ------------------------------------------------------------
class DyingMorph:ActionItem{
	states{
	pickup:
		TNT1 A 0 A_Morph("HDPlayerDying",int.MAX,MRF_TRANSFERTRANSLATION,"CheckPuff","CheckPuff");
		fail;
	}
}
extend class HDHandlers{
	void PlayDead(hdplayerpawn ppp){
		ppp.A_Incapacitated(hdplayerpawn.HDINCAP_FAKING);
	}
}
class HDPlayerDying:HDPlayerPawn{
	default{
		+notarget
		player.viewbob 1.5;
		player.jumpz 0;maxstepheight 8;
		player.morphweapon "SelfBandageDying";
		player.startitem "SelfBandageDying";
		player.viewheight 12;player.attackzoffset 4;
		height 16;
	}
	override void checkcrouch(bool totallyfrozen){}
	override void playrunning(){}
	override void playattacking(){}
	override void playattacking2(){}
	override void playidle(){}
	override void jumpcheck(double fm,double sm,bool forceslide){}
	int excesshealth;
	override void postbeginplay(){
		super.postbeginplay();
		if(excesshealth<999)excesshealth=0;
	}
	override void GiveBasics(){}
	override void tick(){

		//I could write a virtual, or I could just do this...
		bool actuallypressinguse=player&&player.cmd.buttons&BT_USE;
		if(actuallypressinguse&&health>0)player.cmd.buttons&=~BT_USE;

		super.tick();
		if(!player||player.bot||player.mo!=self)return;

		if(viewheight>16)viewheight=max(16,viewheight-2);

		invsel=null; //prevent player from using items

		viewbob=12.;
		speed=min(speed,frandom(0,0.06));
		if(pitch<20)A_MuzzleClimb((frandom(-0.1,0.1),frandom(0.1,0.6)),(0,0),(0,0),(0,0));
		else A_TakeInventory("IsMoving");
		A_SetRoll(25 * sin(angle) * (cos(pitch)**2), SPF_INTERPOLATE);
		gunbraced=false;

		if(health>min(12,getmaxhealth()-1)){		
			excesshealth++;	
			if(
				excesshealth>7
			){
				if(
					actuallypressinguse
					||zerk>0
					||player.cmd.buttons&BT_JUMP
					||(
						player.cmd.buttons&BT_SPEED
						&&(
							player.cmd.forwardmove
							||player.cmd.sidemove
						)
					)
				){
					playerinfo ppp=player;
					UndoPlayerMorph(player,0,true);
					let pppmo=hdplayerpawn(ppp.mo);
					if(ppp.mo){
						ppp.crouchfactor=0.1;
						pppmo.damagemobj(null,null,pppmo.health-health,"internal");
						pppmo.A_PlaySound("*grunt",CHAN_VOICE);
						A_TransferConditions(pppmo);
						pppmo.fatigue+=10;
						pppmo.muzzleclimb1.y=10.;
						pppmo.muzzleclimb2.y=20.;
						pppmo.muzzleclimb3.y=20.;
						pppmo.muzzleclimb4.y=10.;
						pppmo.overloaded=5.;
					}
				}
				return;
			}else{
				damagemobj(null,null,health-10,"maxhpdrain");
			}
		}
		fatigue=(HDCONST_SPRINTFATIGUE>>1);
	}
	int breathtics;
	void A_StillBreathing(){
		if(breathtics>180)breathtics=0;
		breathtics+=15;
		scale.y=1.+0.03*sin(breathtics);
	}
	override void Die(actor source,actor inflictor,int dmgflags,name MeansOfDeath){
		silentdeath=true;
		super.die(source,inflictor,dmgflags,MeansOfDeath);
		if(playercorpse){
			playercorpse.setstatelabel("dead");
			playercorpse.tics=6;
			playercorpse.scale=scale;
		}
	}
	states{
	spawn:
		PLAY H 5 A_SetBlend("00 00 00",1.,140,"00 00 00");
		PLAY IJKL 5;
	see:
	melee:
	missile:
		PLAY L 2 A_StillBreathing();
		wait;
	pain:
		PLAY L 3{excesshealth--;}
		PLAY L 10 A_Pain();
		goto see;
	death:
	xdeath:
		TNT1 A 0 A_NoBlocking();
		TNT1 A 10 A_CheckPlayerDone();
		wait;
	}
}

class SelfBandageDying:SelfBandage{
	class<actor> injecttype;
	class<actor> spentinjecttype;
	class<inventory> inventorytype;
	states{
	altfire:
	althold:
		TNT1 A 10;
		TNT1 A 20 A_PlaySound("weapons/pocket",CHAN_WEAPON);
		TNT1 A 0 A_JumpIfInventory("PortableBerserkPack",1,"injectstim");
		TNT1 A 0 A_JumpIfInventory("PortableStimpack",1,"injectstim");
		goto nope;
	injectstim:
		TNT1 A 10 A_Jump(128,1);
		goto nope;
		TNT1 A 1{
			if(
				countinv("PortableBerserkPack")
				&&(
					!countinv("PortableStimpack")
					||!random(0,countinv("PortableStimpack")*10)
				)
			){
				invoker.inventorytype="PortableBerserkPack";
				invoker.spentinjecttype="SpentZerk";
				invoker.injecttype="InjectZerkDummy";
			}else{
				invoker.inventorytype="PortableStimpack";
				invoker.spentinjecttype="SpentStim";
				invoker.injecttype="InjectStimDummy";
			}
			A_TakeInventory(invoker.inventorytype,1);
			A_SetBlend("7a 3a 18",0.1,4);
			A_SetPitch(pitch+2,SPF_INTERPOLATE);
			A_PlaySound("*usemeds",CHAN_VOICE);
			A_PlaySound("misc/bulletflesh",CHAN_WEAPON);
			actor a=spawn(invoker.injecttype,pos,ALLOW_REPLACE);
			a.accuracy=40;a.target=self;
		}
		TNT1 AAAA 1 A_SetPitch(pitch-0.5,SPF_INTERPOLATE);
		TNT1 A 6;
		TNT1 A 0{
			actor a=spawn(invoker.spentinjecttype,pos+(0,0,height-8),ALLOW_REPLACE);
			a.angle=angle;a.vel=vel;a.A_ChangeVelocity(3,1,2,CVF_RELATIVE);
			a.A_PlaySound("weapons/grenopen",CHAN_VOICE);
		}
		goto nope;
	}
}




